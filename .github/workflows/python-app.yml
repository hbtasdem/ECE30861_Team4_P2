# .github/workflows/ci-cd-phase2.yml
name: Phase 2 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  AWS_REGION: 'us-east-1'  # Change to your region
  ECR_REPOSITORY: 'trustworthy-model-registry'

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black
        
    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check .
      continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Dependabot security updates
      uses: dependabot/fetch-metadata@v1
      
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'trustworthy-model-registry'
        path: '.'
        format: 'HTML'
      continue-on-error: true
        
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          dependency-check-report.html

  # Job 3: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f dependencies.txt ]; then pip install -r dependencies.txt; fi
        pip install pytest pytest-cov
        
    - name: Run unit tests with coverage
      env:
        GEN_AI_STUDIO_API_KEY: ${{ secrets.GEN_AI_STUDIO_API_KEY }}
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term --cov-report=html
        
    - name: Check coverage threshold (60% minimum)
      run: |
        coverage report --fail-under=60
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f dependencies.txt ]; then pip install -r dependencies.txt; fi
        pip install pytest
        
    - name: Run integration tests
      env:
        GEN_AI_STUDIO_API_KEY: ${{ secrets.GEN_AI_STUDIO_API_KEY }}
      run: |
        pytest tests/integration/ -v

  # Job 5: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f dependencies.txt ]; then pip install -r dependencies.txt; fi
        pip install pytest selenium
        
    - name: Start local server for testing
      run: |
        python app.py &
        sleep 10
      env:
        GEN_AI_STUDIO_API_KEY: ${{ secrets.GEN_AI_STUDIO_API_KEY }}
        
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ -v

  # Job 6: Frontend Tests (ADA Compliance)
  frontend-tests:
    name: Frontend & Accessibility Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install frontend dependencies
      run: |
        npm install
      working-directory: ./frontend
      
    - name: Run Selenium tests
      run: |
        npm test
      working-directory: ./frontend
      
    - name: Run WCAG 2.1 AA Accessibility Check
      run: |
        npm install -g pa11y-ci
        pa11y-ci --standard WCAG2AA
      continue-on-error: true

  # Job 7: Build Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ env.ECR_REPOSITORY }}:latest
          ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Save Docker image for deployment
      run: |
        docker save ${{ env.ECR_REPOSITORY }}:latest -o app-image.tar
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: app-image.tar
        retention-days: 7

  # Job 8: Deploy to AWS (CD - Continuous Deployment)
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build-docker]
    # Only deploy on push to main branch, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        
    - name: Load and push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker load -i app-image.tar
        docker tag ${{ env.ECR_REPOSITORY }}:latest $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker tag ${{ env.ECR_REPOSITORY }}:latest $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        
    - name: Deploy to AWS ECS (or Lambda/EC2)
      run: |
        # Update ECS service to use new image
        aws ecs update-service \
          --cluster trustworthy-registry-cluster \
          --service trustworthy-registry-service \
          --force-new-deployment
        
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster trustworthy-registry-cluster \
          --services trustworthy-registry-service
        
    - name: Get deployment URL
      id: get-url
      run: |
        # Get the load balancer URL or API Gateway endpoint
        echo "DEPLOYMENT_URL=https://your-api-gateway-url.amazonaws.com" >> $GITHUB_OUTPUT
        
    - name: Comment deployment URL on PR (if applicable)
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Deployed to: ${{ steps.get-url.outputs.DEPLOYMENT_URL }}'
          })

  # Job 9: Post-Deployment Smoke Tests
  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-aws
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      run: |
        pip install pytest requests
        
    - name: Run smoke tests against deployed service
      env:
        API_ENDPOINT: ${{ secrets.DEPLOYED_API_ENDPOINT }}
        DEFAULT_USERNAME: ece30861defaultadminuser
        DEFAULT_PASSWORD: 'correcthorsebatterystaple123(!__+@**(A;DROP TABLE packages'
      run: |
        pytest tests/smoke/ -v --api-endpoint=$API_ENDPOINT

  # Job 10: Update Health Dashboard
  update-dashboard:
    name: Update System Health Dashboard
    runs-on: ubuntu-latest
    needs: deploy-aws
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Trigger dashboard update
      run: |
        # Call your /health endpoint or CloudWatch to update dashboard
        curl -X POST https://your-api-endpoint/health/update \
          -H "Content-Type: application/json" \
          -d '{"deployment": "${{ github.sha }}", "status": "success"}'

  # Job 11: Notification
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-aws, smoke-tests]
    if: always()
    
    steps:
    - name: Send status notification
      run: |
        echo "Deployment status: ${{ job.status }}"
        # Add Slack/Discord/Email notifications here
